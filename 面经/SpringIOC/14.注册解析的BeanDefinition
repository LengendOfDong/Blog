# 注册解析的BeanDefinition
DefaultBeanDefinitionDocumentReader.processBeanDefinition()完成Bean标签的解析的核心工作。如下：
```java
protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {
        BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);
        if (bdHolder != null) {
            bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);
            try {
                // Register the final decorated instance.
                BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());
            }
            catch (BeanDefinitionStoreException ex) {
                getReaderContext().error("Failed to register bean definition with name '" +
                        bdHolder.getBeanName() + "'", ele, ex);
            }
            // Send registration event.
            getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));
        }
    }
```
解析工作分为三步：
- 解析默认标签 
- 解析默认标签后下的自定义标签
- 注册解析后的BeanDefinition
经过前面两个步骤的解析，BeanDefinition已经得到了，后面的工作就是将这些BeanDefinition进行注册，也就是完成第三步。注册BeanDefinition由BeanDefinitionReaderUtils.registerBeanDefinition()完成。
```java
 public static void registerBeanDefinition(
            BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)
            throws BeanDefinitionStoreException {

        // 注册 beanName
        String beanName = definitionHolder.getBeanName();
        registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());

        // 注册 alias 
        String[] aliases = definitionHolder.getAliases();
        if (aliases != null) {
            for (String alias : aliases) {
                registry.registerAlias(beanName, alias);
            }
        }
    }
```

首先通过beanName注册BeanDefinition，然后再注册别名alias.BeanDefinition的注册由接口BeanDefinitionRegistry定义。通过beanName注册BeanDefinition，处理过程如下：
- 首先BeanDefinition进行校验，该校验也是注册过程中的最后一次校验了，主要是对AbstractBeanDefinition的methodOverrides

